//priority queue has heap functionality
//NOTE : The starting element of priority_queue is always the smallest element in queue that is to say that after every insert the front of queue is updated.
import java.util.PriorityQueue;
import java.util.*;
import java.util.Iterator;
public class priority_queue1
{
	public static void main(String args[])
	{
		Scanner s = new Scanner(System.in);
		PriorityQueue<Integer> pq1 = new PriorityQueue<>();
		int flag = 0;
		while(flag != 10)
		{
			System.out.println("\n1.add\n2.offer\n3.peek\n4.contains\n5.remove\n6.poll\n7.Iterator\n8.toArray\n9.size\n10.exit");
			flag = s.nextInt();
			switch(flag)
			{
				case 1:
				{
				    System.out.println("Enter element to add :");//throws exception if failed to add.
					int val = s.nextInt();
					pq1.add(val);
					break;
				}
				case 2:
				{
					System.out.println("Enter element to offer :");//return false if failed.
					int val = s.nextInt();
					pq1.offer(val);
					break;
				}
				case 3:
				{
					System.out.println("head in queue " + pq1.peek());//return null if empty.
					break;
				}
				case 4:
				{
					System.out.println("Enter element to search :");
					int valx = s.nextInt();
					System.out.println("The value is in queue :" + pq1.contains(valx));//return exception if empty queue.
					break;
				}
				case 5:
				{
					System.out.println(pq1.remove() + " is head of queue and is removed from queue");//throws exception if queue empty.
					break;
				}
				case 6:
				{
					System.out.println(pq1.poll() + " is head and is removed from queue");//return null if queue empty.
					break;
				}
				case 7:
				{
					Iterator<Integer> iterate = pq1.iterator();
                    while(iterate.hasNext()) {
                    System.out.print(iterate.next());
                    System.out.print(", ");}
					break;
				}
				case 8:
				{
					Object a[] = pq1.toArray();
					for(int i = 0;  i < a.length; i++)
					{
						System.out.println(a[i] + " ");
					}
					break;
				}
				case 9:
				{
					System.out.println(pq1.size() + " is the size of queue");
					break;
				}
				case 10:   
                {  
                    System.out.println("Terminating the program....");  
                    System.exit(0);  
                    break;   
                }  
				default:
				{
					System.out.println("Enter valid choice");
				}
			}
		}
	}
}
		
