import java.util.*;
public class map1
{
	public static void main(String args[])
	{
		Scanner s = new Scanner(System.in);
		Map<Integer,Integer>  m1 = new HashMap<Integer,Integer>();  
		int flag = 0;
		while(flag != 32)
		{
			System.out.println("\n1.put\n2.putAll\n3.putifabsent\n4.remove\n5.remove pair\n6.keyset\n7.entryset\n8.clear\n9.compute\n10.computeifabsent\n11.computeifpresent\n12.contain_value\n13.contain_key\n14.equals\n15.foreach\n16.get\n17.getOrDefault\n18.hashcode(still need to improve)\n19.isEmpty\n20.merge\n21.replace\n22.replace\n23.replaceAll\n24.values\n25.size\n26.getkey && getvalue\n27.setvalue\n28.equals\n29.comparebykey\n30.comparebyvalue\n31.display\n32.exit");
			flag = s.nextInt();
			switch(flag)
			{
				case 1:
				{
					System.out.println("Enter key :");
					int a1 = s.nextInt();
					System.out.println("Enter value :");
					int a2 = s.nextInt();
					m1.put(a1,a2);
					break;
				}
				case 2:
				{
					Map m2 = new HashMap();
					System.out.println("Enter key :");
					int a3 = s.nextInt();
					System.out.println("Enter value :");
					int a4 = s.nextInt();
					m2.put(a3,a4);
					m1.putAll(m2);
					break;
				}
				case 3:
				{
					System.out.println("Enter key :");
					int a5 = s.nextInt();
					System.out.println("Enter value :");
					int a6 = s.nextInt();
					m1.putIfAbsent(a5,a6);
					break;
				}
				case 4:
				{
					System.out.println("Enter key to remove from map :");
					m1.remove(s.nextInt());
					break;
				}
				case 5:
				{
					System.out.println("Enter key :");
					int a7 = s.nextInt();
					System.out.println("Enter value :");
					int a8 = s.nextInt();
					m1.remove(a7,a8);
					break;
				}
				case 6:
				{
					System.out.println(m1.keySet());
					break;
				}
				case 7:
				{
					System.out.println(m1.entrySet());
					break;
				}
				case 8:
				{
					m1.clear();
					System.out.println("The map is cleared ");
					break;
				}
				case 9:
				{
					System.out.println("Enter key to compute :");
					int a9 = s.nextInt();
					int new1 = m1.compute(a9, (key, value) -> (value + 100));
                    System.out.println("computed value : " + new1);
					break;
				}
				case 10:
				{
					System.out.println("Enter key to compute :");
					int a10 = s.nextInt();
					int new2 = m1.computeIfAbsent(a10, key -> 280);
                    System.out.println("updated value " + new2);
					break;
				}
				case 11:
				{
					System.out.println("Enter key to compute :");
					int a11 = s.nextInt();
					int new3 = m1.computeIfPresent(a11, (key, value) -> value + 100);
                    System.out.println("updated value " + new3);
					break;
				}
				case 12:
				{
					System.out.println("Enter value to check if exists :");
					System.out.println(m1.containsValue(s.nextInt()));
					break;
				}
				case 13:
				{
					System.out.println("Enter key to check :");
					System.out.println(m1.containsKey(s.nextInt()));
					break;
				}
				case 14:
				{
					System.out.println("Enter value :");
					System.out.println("The value in map :" + m1.equals(s.nextInt()));
					break;
				}
				case 15:
				{
					m1.forEach((key, value) -> 
					{
                        value = value + 100;
                    });
					break;
				}
				case 16:
				{
					System.out.println("Enter the key to get :");
					System.out.println("The value of key is :" + m1.get(s.nextInt()));
					break;
				}
				case 17:
				{
					System.out.println("Enter the key to get default value :");
					int value1 = m1.getOrDefault(s.nextInt(), 0);
                    System.out.println("Value for key :  " + value1);
					break;
				}
				case 18:
				{
					//need some modification
				}
				case 19:
				{
					System.out.println("The map is empty :" + m1.isEmpty());
					break;
				}
				case 20:
				{
					System.out.println("Enter the key to get :");
					int value2 = m1.merge(s.nextInt(), 100, (oldValue, newValue) -> oldValue + newValue);
					break;
				}
				case 21:
				{
					System.out.println("Enter key :");
					int a12 = s.nextInt();
					System.out.println("Enter value :");
					int a13 = s.nextInt();
					m1.replace(a12, a13);
					break;
				}
				case 22:
				{
					System.out.println("Enter key :");
					int a14 = s.nextInt();
					System.out.println("Enter old value :");
					int a15 = s.nextInt();
					System.out.println("Enter new value :");
					int a16 = s.nextInt();
					m1.replace(a14, a15,a16);
					break;
				}
				case 23:
				{
					m1.replaceAll((key, value) -> (key*key));;
					break;
				}
				case 24:
				{
					System.out.println(m1.values());
					break;
				}
				case 25:
				{
					System.out.println("The size of Map is : " + m1.size());
					break;
				}
				case 26:
				{
					Set s1=m1.entrySet();
					Iterator itr=s1.iterator();  
                    while(itr.hasNext())
					{  
                        Map.Entry entry=(Map.Entry)itr.next();  
                        System.out.println(entry.getKey()+" "+entry.getValue());  
                    }  
					break;
				}
				case 27:
				{
					System.out.println("Enter value :");
					Map.Entry e = (Map.Entry) m1.entrySet().iterator().next();
                    Object returnVal = e.setValue(s.nextInt());
					break;
				}
				case 28:
				{
					System.out.println("Enter value :");
					System.out.println(m1.equals(s.nextInt()));
					break;
				}
				case 29:
				{
					m1.entrySet()  
                    .stream()  
                    .sorted(Map.Entry.comparingByKey())  
                    .forEach(System.out::println); 
					break;
				}
				case 30:
				{
					 m1.entrySet()   
                     .stream()  
                     .sorted(Map.Entry.comparingByValue())  
                     .forEach(System.out::println);  
					 break;
				}
				case 31:
				{
					System.out.println("The elements of map are :" + m1);
					break;
				}
				case 32:
				{
					System.out.println("Terminating the program....");  
                    System.exit(0);  
                    break;   
                }  
				default:
				{
					System.out.println("Enter valid choice");
				}
			}
		}
	}
}


